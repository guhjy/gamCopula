% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/gamVineStructureSelect.R
\name{gamVineStructureSelect}
\alias{gamVineStructureSelect}
\title{Structure selection and estimation of a GAM-Vine model.}
\usage{
gamVineStructureSelect(data, type = 0, familyset = NA, rotations = TRUE,
  selectioncrit = "AIC", SAtestOptions = "ERC", indeptest = TRUE,
  level = 0.05, trunclevel = NA, method = "NR", tol.rel = 0.001,
  n.iters = 10, verbose = FALSE)
}
\arguments{
\item{data}{A matrix or data frame containing the data in [0,1]^d.}

\item{type}{\code{type = 0} (default) for a R-Vine and \code{type = 1} for a
C-Vine}

\item{familyset}{An integer vector of pair-copula families to select from
(the independence copula MUST NOT be specified in this vector unless one
wants to fit an independence vine!). The vector has to include at least one
pair-copula family that allows for positive and one that allows for negative
dependence. Not listed copula families might be included to better handle
limit cases. If \code{familyset = NA} (default), selection among all
possible families is performed. Coding of pair-copula families:
\code{1} Gaussian, \code{2} Student t,
\code{3} Clayton, \code{4} Gumbel, \code{13} Survival Clayton,
\code{14} Survival Gumbel,  \code{23} Rotated (90 degrees) Clayton,
\code{24} Rotated (90 degrees) Gumbel,
\code{33} Rotated (270 degrees) Clayton and
\code{34} Rotated (270 degrees) Gumbel.}

\item{rotations}{If \code{TRUE}, all rotations of the families in familyset
are included.}

\item{selectioncrit}{Character indicating the criterion for bivariate copula
selection. Possible choices: \code{selectioncrit = 'AIC'} (default) or
\code{'BIC'}, as in \code{\link{BiCopSelect}} from the
\code{\link[VineCopula:VineCopula-package]{VineCopula}} package.}

\item{SAtestOptions}{TODO;TODO;TODO;TODO;TODO;TODO;TODO!!!}

\item{indeptest}{Logical; whether a hypothesis test for the simplifying
assumption and the independence of
\code{u1} and \code{u2} is performed before bivariate copula selection
(default: \code{indeptest = TRUE}; see \code{\link{BiCopIndTest}} and
\code{\link{SAtest}}).
The independence copula is chosen for a (conditional) pair if both the
simplifying assumption and the null
hypothesis of independence cannot be rejected.}

\item{level}{Numerical; significance level of the test (default:
\code{level = 0.05}).}

\item{trunclevel}{Integer; level of truncation.}

\item{method}{\code{'NR'} for Newton-Raphson
and  \code{'FS'} for Fisher-scoring (default).}

\item{tol.rel}{Relative tolerance for \code{'FS'}/\code{'NR'} algorithm.}

\item{n.iters}{Maximal number of iterations for
\code{'FS'}/\code{'NR'} algorithm.}

\item{verbose}{\code{TRUE} if informations should be printed during the
estimation and \code{FALSE} (default) for a silent version.
from \code{\link[mgcv:mgcv-package]{mgcv}}.}
}
\value{
\code{gamVineSeqEst} returns a \code{\link{gamVine-class}} object.
}
\description{
This function select the structure and estimates the parameter(s) of a
Generalized Additive model
(GAM) Vine model, where GAMs for individual edges are specified either for
the copula parameter or Kendall's tau.
It solves the maximum penalized likelihood estimation for the copula families
supported in this package by reformulating each Newton-Raphson iteration as
a generalized ridge regression, which is solved using
the \code{\link[mgcv:mgcv-package]{mgcv}} package.
}
\examples{
set.seed(1)

##  Simulation parameters
# Sample size
n <- 2e2
# Copula family
familyset <- c(1:4,13,14,23,24,33,34)
# Degrees of freedom (for the t-copula when fam <- 2)
par2 <- 4
# Should the model be specified in terms of Kendall's tau (TRUE) or copula parameter
tau <- FALSE
# Define a 5-dimensional R-vine tree structure matrix
d <- 4
Matrix <- c(2,3,4,1,0,3,4,1,0,0,4,1,0,0,0,1)
Matrix <- matrix(Matrix,d,d)
nnames <- paste("X", 1:d, sep = "")

## Covariates distribution
rho <- 0.5

# define gam-vine model list
count <- 1
model <- vector(mode = "list", length = d*(d-1)/2)
par <- matrix(0,d,d)
sel <- seq(d,d^2-d, by = d)

# First tree
for (i in 1:(d-1)) {
  # Select a copula family
  family <- sample(familyset, 1)
  model[[count]]$family <- family

  # Use the canonical link and a randomly generated parameter
  model[[count]]$par <- links(family)$par(rnorm(1))
  if (family == 2) {
    model[[count]]$par2 <- links(family)$par2(rnorm(1))
  } else {
    model[[count]]$par2 <- 0
  }
  count <- count + 1
}

# Create a dummy dataset
data <- data.frame(u1 = runif(1e2), u2 = runif(1e2), matrix(runif(1e2*d),1e2,d))

# Trees 2 to (d-1)
for(j in 2:(d-1)){
  for(i in 1:(d-j)){
    # Select a copula family
    family <- sample(familyset, 1)

    # Select the conditiong set and create a model formula
    cond <- nnames[sort(Matrix[(d-j+2):d,i])]
    form <- as.formula(paste("~",paste(paste("s(", cond, ", k=10, bs='cr')",
                                             sep = ""), collapse=" + ")))

    # Create a dummy gamBiCop object
    tmp <- gamBiCopEst(data = data, formula = form, family = 1, n.iters = 1)$res

    # Update the copula family and the model coefficients to make them random
    ll <- length(attr(tmp, "model")$coefficients)
    attr(tmp, "model")$coefficients <- rnorm(ll)
    attr(tmp, "family") <- family
    if (family == 2) {
      attr(tmp, "par2") <- links(family)$par2(rnorm(1))
    }
    model[[count]] <- tmp
    count <- count+1
  }
}

# Create gamVineCopula object
GVC <- gamVine(Matrix=Matrix,model = model,names=nnames)
print(GVC)

# simulate the gamVineMatrix
N <- 1e3
sim <- gamVineSim(N, GVC)
fitGVC <- gamVineSeqEst(sim, GVC, verbose = TRUE)

par(mfrow=c(2,4))
plot(GVC, se = F, ylim = c(-2.5,2.5))

plot(fitGVC, ylim = c(-2.5,2.5))
}
\seealso{
\code{\link{gamVine-class}}, \code{\link{gamVineSim}},
\code{\link{gamVineSeqEst}} and \code{\link{gamBiCopEst}}.
}

